// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// epaKernelSmoothingCurve
arma::vec epaKernelSmoothingCurve(const arma::vec& U, const arma::vec& T, const arma::vec& Y, const arma::vec& b, const double& n_obs_min);
RcppExport SEXP _denoisr_epaKernelSmoothingCurve(SEXP USEXP, SEXP TSEXP, SEXP YSEXP, SEXP bSEXP, SEXP n_obs_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_obs_min(n_obs_minSEXP);
    rcpp_result_gen = Rcpp::wrap(epaKernelSmoothingCurve(U, T, Y, b, n_obs_min));
    return rcpp_result_gen;
END_RCPP
}
// uniKernelSmoothingCurve
arma::vec uniKernelSmoothingCurve(const arma::vec& U, const arma::vec& T, const arma::vec& Y, const arma::vec& b, const double& n_obs_min);
RcppExport SEXP _denoisr_uniKernelSmoothingCurve(SEXP USEXP, SEXP TSEXP, SEXP YSEXP, SEXP bSEXP, SEXP n_obs_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_obs_min(n_obs_minSEXP);
    rcpp_result_gen = Rcpp::wrap(uniKernelSmoothingCurve(U, T, Y, b, n_obs_min));
    return rcpp_result_gen;
END_RCPP
}
// biweightKernelSmoothingCurve
arma::vec biweightKernelSmoothingCurve(const arma::vec& U, const arma::vec& T, const arma::vec& Y, const arma::vec& b, const double& n_obs_min);
RcppExport SEXP _denoisr_biweightKernelSmoothingCurve(SEXP USEXP, SEXP TSEXP, SEXP YSEXP, SEXP bSEXP, SEXP n_obs_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type n_obs_min(n_obs_minSEXP);
    rcpp_result_gen = Rcpp::wrap(biweightKernelSmoothingCurve(U, T, Y, b, n_obs_min));
    return rcpp_result_gen;
END_RCPP
}
// betaKernelSmoothingCurve
arma::vec betaKernelSmoothingCurve(const arma::vec& U, const arma::vec& T, const arma::vec& Y, const arma::vec& b);
RcppExport SEXP _denoisr_betaKernelSmoothingCurve(SEXP USEXP, SEXP TSEXP, SEXP YSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(betaKernelSmoothingCurve(U, T, Y, b));
    return rcpp_result_gen;
END_RCPP
}
// modifiedBetaKernelSmoothingCurve
arma::vec modifiedBetaKernelSmoothingCurve(const arma::vec& U, const arma::vec& T, const arma::vec& Y, const arma::vec& b);
RcppExport SEXP _denoisr_modifiedBetaKernelSmoothingCurve(SEXP USEXP, SEXP TSEXP, SEXP YSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(modifiedBetaKernelSmoothingCurve(U, T, Y, b));
    return rcpp_result_gen;
END_RCPP
}
// estimateRisk
Rcpp::List estimateRisk(const List& curves, const List& curves_estim, const double& t0);
RcppExport SEXP _denoisr_estimateRisk(SEXP curvesSEXP, SEXP curves_estimSEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type curves(curvesSEXP);
    Rcpp::traits::input_parameter< const List& >::type curves_estim(curves_estimSEXP);
    Rcpp::traits::input_parameter< const double& >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(estimateRisk(curves, curves_estim, t0));
    return rcpp_result_gen;
END_RCPP
}
// estimateRiskCurve
double estimateRiskCurve(const List& curve, const List& curve_estim);
RcppExport SEXP _denoisr_estimateRiskCurve(SEXP curveSEXP, SEXP curve_estimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type curve(curveSEXP);
    Rcpp::traits::input_parameter< const List& >::type curve_estim(curve_estimSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateRiskCurve(curve, curve_estim));
    return rcpp_result_gen;
END_RCPP
}
// estimateRiskCurves
List estimateRiskCurves(const List& curves, const List& curves_estim);
RcppExport SEXP _denoisr_estimateRiskCurves(SEXP curvesSEXP, SEXP curves_estimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type curves(curvesSEXP);
    Rcpp::traits::input_parameter< const List& >::type curves_estim(curves_estimSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateRiskCurves(curves, curves_estim));
    return rcpp_result_gen;
END_RCPP
}
// estimateSigma
double estimateSigma(const List& curves);
RcppExport SEXP _denoisr_estimateSigma(SEXP curvesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type curves(curvesSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateSigma(curves));
    return rcpp_result_gen;
END_RCPP
}
// estimateSigmaMSE
double estimateSigmaMSE(const List& curves, const List& curves_estim);
RcppExport SEXP _denoisr_estimateSigmaMSE(SEXP curvesSEXP, SEXP curves_estimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type curves(curvesSEXP);
    Rcpp::traits::input_parameter< const List& >::type curves_estim(curves_estimSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateSigmaMSE(curves, curves_estim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_denoisr_epaKernelSmoothingCurve", (DL_FUNC) &_denoisr_epaKernelSmoothingCurve, 5},
    {"_denoisr_uniKernelSmoothingCurve", (DL_FUNC) &_denoisr_uniKernelSmoothingCurve, 5},
    {"_denoisr_biweightKernelSmoothingCurve", (DL_FUNC) &_denoisr_biweightKernelSmoothingCurve, 5},
    {"_denoisr_betaKernelSmoothingCurve", (DL_FUNC) &_denoisr_betaKernelSmoothingCurve, 4},
    {"_denoisr_modifiedBetaKernelSmoothingCurve", (DL_FUNC) &_denoisr_modifiedBetaKernelSmoothingCurve, 4},
    {"_denoisr_estimateRisk", (DL_FUNC) &_denoisr_estimateRisk, 3},
    {"_denoisr_estimateRiskCurve", (DL_FUNC) &_denoisr_estimateRiskCurve, 2},
    {"_denoisr_estimateRiskCurves", (DL_FUNC) &_denoisr_estimateRiskCurves, 2},
    {"_denoisr_estimateSigma", (DL_FUNC) &_denoisr_estimateSigma, 1},
    {"_denoisr_estimateSigmaMSE", (DL_FUNC) &_denoisr_estimateSigmaMSE, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_denoisr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
